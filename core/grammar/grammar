comment = hashtag

string = singleQuote
       | doubleQuote

arrayType = (type var) beginBlock num

mapType = (type var) beginBlock (type var)

typeDeclaration = (var type) var

var = var underline var
    | underline var
    | var underline
    | underline

floatNumber = num dot num
            | num dot

dotAccess = expr dot expr
          | dot expr

group = lparen expr rparen

operator = (equal operator) (equal operator)

call = expr lparen rparen
     | expr lparen (expr args assign kwargs) rparen
     | expr lparen (expr args) kwargs rparen

expr = num
     | floatNumber
     | var
     | dotAccess
     | group
     | (num var expr) operator (num var expr)
     | operator (expr)

keyVal = expr beginBlock expr

keyVals = (keyVals keyVal) comma (keyVal keyVals)

indexAccess = expr lbracket (expr) rbracket

array = lbracket (args expr) rbracket
      | lbracket rbracket

hashmap = lbrace rbrace
        | lbrace (keyVal keyVals) rbrace

funcReturn = returnStatement
           | returnStatement expr

imports = importStatement expr

rangeExpr = expr dot dot expr
          | expr dot dot expr dot dot expr

ifelif = (ifStatement elifStatement) expr beginBlock

forLoop = forStatement expr inStatement (range expr) beginBlock

whileLoop = whileStatement expr beginBlock

args = (args expr) comma (args expr)

kwargs = (assign kwargs) comma (assign kwargs)

augAssign = expr operator equal expr

assign = expr equal expr

function = defStatement expr lparen (expr args assign kwargs) rparen beginBlock
         | defStatement expr lparen (expr args) kwargs rparen beginBlock
         | defStatement expr lparen rparen beginBlock

classDefinition = classStatement expr lparen rparen beginBlock
                | classStatement expr lparen (expr args) rparen beginBlock

printFunc = print lparen (expr) rparen
          | print lparen rparen

inputFunc = input lparen (expr) rparen
          | input lparen rparen
