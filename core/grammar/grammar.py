patterns = {
    ('hashtag',): comment,
    ('singleQuote',): string,
    ('doubleQuote',): string,

    ('var','underline','var'): var,
    ('underline','var'): var,
    ('var','underline'): var,
    ('underline'): var,

    ('value','dot','value'): floatNumber,

    ('sizeof','lparen','type','rparen'): sizeof,
    ('sizeof','lparen','var','rparen'): sizeof,

    ('type','beginBlock','type'): multiType,
    ('type','beginBlock','var'): multiType,
    ('type','beginBlock','operator'): multiType,
    ('type','beginBlock','value'): multiType,
    ('var','beginBlock','type'): multiType,
    ('var','beginBlock','var'): multiType,
    ('var','beginBlock','operator'): multiType,
    ('var','beginBlock','value'): multiType,
    ('operator','beginBlock','type'): multiType,
    ('operator','beginBlock','var'): multiType,
    ('operator','beginBlock','operator'): multiType,

    ('type','dot'): multiType,
    ('type','lbracket','rbracket'): multiType,
    ('type','type'): multiType,
    ('type','operator'): multiType,

    ('type','lparen','value','rparen'): convert,
    ('type','lparen','var','rparen'): convert,
    ('type','lparen','expr','rparen'): convert,
    ('type','lparen','dotAccess','rparen'): convert,

    ('type','var'): typeVar,
    ('type','dotAccess'): typeVar,
    ('var','var'): typeVar,

    ('operator','operator'): multiOperator,
    ('equal','equal'): multiOperator,
    ('exclamation','equal'): multiOperator,
    ('greaterThan','equal'): multiOperator,
    ('lessThan','equal'): multiOperator,
    ('lessThan','lessThan'): multiOperator,
    ('greaterThan','greaterThan'): multiOperator,

    ('print','lparen','expr','rparen'): printFunction,
    ('print','lparen','value','rparen'): printFunction,
    ('print','lparen','var','rparen'): printFunction,
    ('print','lparen','call','rparen'): printFunction,
    ('print','lparen','args','rparen'): printFunction,
    ('print','lparen','dotAccess','rparen'): printFunction,

    ('addr','lparen','var','rparen'): addrFunction,
    ('addr','lparen','dotAccess','rparen'): addrFunction,

    ('var','dot','var'): dotAccess,
    ('var','dot','type'): dotAccess,
    ('call','dot','var'): dotAccess,
    ('call','dot','type'): dotAccess,
    ('dotAccess','dot','var'): dotAccess,
    ('dotAccess','dot','dotAccess'): dotAccess,
    ('dotAccess','dot','type'): dotAccess,
    ('dotAccess','dot','call'): dotAccess,

    ('var','lbracket','value','rbracket'): indexAccess,
    ('var','lbracket','var','rbracket'): indexAccess,
    ('var','lbracket','dotAccess','rbracket'): indexAccess,
    ('var','lbracket','convert','rbracket'): indexAccess,
    ('var','lbracket','expr','rbracket'): indexAccess,
    ('dotAccess','lbracket','value','rbracket'): indexAccess,
    ('dotAccess','lbracket','var','rbracket'): indexAccess,
    ('dotAccess','lbracket','dotAccess','rbracket'): indexAccess,
    ('dotAccess','lbracket','convert','rbracket'): indexAccess,
    ('dotAccess','lbracket','expr','rbracket'): indexAccess,

    ('lbracket','args','rbracket'): listValue,
    ('lbracket','value','rbracket'): listValue,
    ('lbracket','var','rbracket'): listValue,
    ('lbracket','expr','rbracket'): listValue,
    ('lbracket','call','rbracket'): listValue,
    ('lbracket','dotAccess','rbracket'): listValue,
    ('lbracket','rbracket'): listValue,

    ('lCBrace','args','rCBrace'): dictValue,
    ('lCBrace','assignment','rCBrace'): dictValue,
    ('lCBrace','rCBrace'): dictValue,

    ('lparen','expr','rparen'): group,

    ('dotAccess','lparen','value','rparen'): functionCall, # order is important
    ('dotAccess','lparen','var','rparen'): functionCall, # in a case where a = add()
    ('dotAccess','lparen','expr','rparen'): functionCall, # var equal var lparen rparen
    ('dotAccess','lparen','args','rparen'): functionCall, # so that var equal var is not reduced first
    ('dotAccess','lparen','call','rparen'): functionCall, # order is important
    ('dotAccess','lparen','dotAccess','rparen'): functionCall, # order is important
    ('dotAccess','lparen','assignment','rparen'): functionCall, # order is important
    ('dotAccess','lparen','convert','rparen'): functionCall, # order is important
    ('dotAccess','lparen','addrFunc','rparen'): functionCall, # order is important
    ('dotAccess','lparen','sizeofFunc','rparen'): functionCall, # order is important
    ('dotAccess','lparen','rparen'): functionCall, # and var equal call is obtained

    ('var','lparen','value','rparen'): functionCall, # order is important
    ('var','lparen','var','rparen'): functionCall, # in a case where a = add()
    ('var','lparen','expr','rparen'): functionCall, # var equal var lparen rparen
    ('var','lparen','args','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','call','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','dotAccess','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','assignment','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','convert','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','addrFunc','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','sizeofFunc','rparen'): functionCall, # so that var equal var is not reduced first
    ('var','lparen','rparen'): functionCall, # and var equal call is obtained

    ('value','operator','value'): expression,
    ('value','operator','var'): expression,
    ('value','operator','dotAccess'): expression,
    ('value','operator','expr'): expression,
    ('value','operator','group'): expression,
    ('value','operator','call'): expression,
    ('value','operator','convert'): expression,
    ('var','operator','value'): expression,
    ('var','operator','var'): expression,
    ('var','operator','dotAccess'): expression,
    ('var','operator','expr'): expression,
    ('var','operator','group'): expression,
    ('var','operator','call'): expression,
    ('var','operator','convert'): expression,
    ('expr','operator','value'): expression,
    ('expr','operator','var'): expression,
    ('expr','operator','dotAccess'): expression,
    ('expr','operator','expr'): expression,
    ('expr','operator','group'): expression,
    ('expr','operator','call'): expression,
    ('expr','operator','convert'): expression,
    ('dotAccess','operator','value'): expression,
    ('dotAccess','operator','var'): expression,
    ('dotAccess','operator','dotAccess'): expression,
    ('dotAccess','operator','expr'): expression,
    ('dotAccess','operator','group'): expression,
    ('dotAccess','operator','call'): expression,
    ('dotAccess','operator','convert'): expression,
    ('expr','operator','value'): expression,
    ('expr','operator','var'): expression,
    ('expr','operator','dotAccess'): expression,
    ('expr','operator','expr'): expression,
    ('expr','operator','group'): expression,
    ('expr','operator','call'): expression,
    ('expr','operator','convert'): expression,
    ('group','operator','value'): expression,
    ('group','operator','var'): expression,
    ('group','operator','dotAccess'): expression,
    ('group','operator','expr'): expression,
    ('group','operator','group'): expression,
    ('group','operator','call'): expression,
    ('group','operator','convert'): expression,
    ('call','operator','value'): expression,
    ('call','operator','var'): expression,
    ('call','operator','dotAccess'): expression,
    ('call','operator','expr'): expression,
    ('call','operator','group'): expression,
    ('call','operator','call'): expression,
    ('call','operator','convert'): expression,
    ('convert','operator','value'): expression,
    ('convert','operator','var'): expression,
    ('convert','operator','dotAccess'): expression,
    ('convert','operator','expr'): expression,
    ('convert','operator','group'): expression,
    ('convert','operator','call'): expression,
    ('convert','operator','convert'): expression,
    ('sizeof','operator','value'): expression,
    ('sizeof','operator','var'): expression,
    ('sizeof','operator','dotAccess'): expression,
    ('sizeof','operator','expr'): expression,
    ('sizeof','operator','group'): expression,
    ('sizeof','operator','call'): expression,
    ('sizeof','operator','sizeof'): expression,

    ('value','dot','dot','value','dot','dot','value'): rangeValue,
    ('value','dot','dot','value'): rangeValue,
    ('value','dot','dot','convert'): rangeValue,
    ('value','dot','dot','var'): rangeValue,
    ('value','dot','dot','dotAccess'): rangeValue,
    ('value','dot','dot','expr'): rangeValue,
    ('value','dot','dot','call'): rangeValue,
    ('expr','dot','dot','value','dot','dot','value'): rangeValue,
    ('expr','dot','dot','value'): rangeValue,
    ('expr','dot','dot','convert'): rangeValue,
    ('expr','dot','dot','var'): rangeValue,
    ('expr','dot','dot','dotAccess'): rangeValue,
    ('expr','dot','dot','expr'): rangeValue,
    ('expr','dot','dot','call'): rangeValue,
    ('var','dot','dot','value','dot','dot','value'): rangeValue,
    ('var','dot','dot','value'): rangeValue,
    ('var','dot','dot','convert'): rangeValue,
    ('var','dot','dot','var'): rangeValue,
    ('var','dot','dot','dotAccess'): rangeValue,
    ('var','dot','dot','expr'): rangeValue,
    ('var','dot','dot','call'): rangeValue,
    ('value','dot'): floatNumber,

#    ('type','var','equal','value'): assignment,
#    ('type','var','equal','var'): assignment,
#    ('type','var','equal','expr'): assignment,
#    ('type','var','equal','call'): assignment,
    ('type','dotAccess','equal','value'): assignment,
    ('type','dotAccess','equal','var'): assignment,
    ('type','dotAccess','equal','expr'): assignment,
    ('type','dotAccess','equal','call'): assignment,

    ('var','equal','value'): assignment,
    ('var','equal','var'): assignment,
    ('var','equal','expr'): assignment,
    ('var','equal','call'): assignment,
    ('var','equal','convert'): assignment,
    ('var','equal','dotAccess'): assignment,
    ('dotAccess','equal','value'): assignment,
    ('dotAccess','equal','var'): assignment,
    ('dotAccess','equal','expr'): assignment,
    ('dotAccess','equal','call'): assignment,
    ('dotAccess','equal','convert'): assignment,
    ('dotAccess','equal','dotAccess'): assignment,

    ('var','operator','equal','value'): assignment,
    ('var','operator','equal','var'): assignment,
    ('var','operator','equal','expr'): assignment,
    ('var','operator','equal','call'): assignment,
    ('var','operator','equal','convert'): assignment,
    ('var','operator','equal','dotAccess'): assignment,
    ('dotAccess','operator','equal','value'): assignment,
    ('dotAccess','operator','equal','var'): assignment,
    ('dotAccess','operator','equal','expr'): assignment,
    ('dotAccess','operator','equal','call'): assignment,
    ('dotAccess','operator','equal','convert'): assignment,
    ('dotAccess','operator','equal','dotAccess'): assignment,

    ('value','equal','value'): assignment,
    ('value','equal','call'): assignment,
    ('value','equal','var'): assignment,
    ('value','equal','dotAccess'): assignment,

    ('operator','value'): modifierOperator, # order is important
    ('operator','call'): modifierOperator, # order is important
    ('operator','dotAccess'): modifierOperator, # order is important
    ('operator','expr'): modifierOperator, # order is important
    ('operator','var'): modifierOperator, # order is important

    ('args','comma','value'): args, # oder is important
    ('args','comma','var'): args,
    ('args','comma','expr'): args,
    ('args','comma','call'): args,
    ('args','comma','dotAccess'): args,
    ('args','comma','args'): args,
    ('args','comma','assignment'): args,
    ('args','comma','convert'): args,
    ('args','comma','addrFunc'): args,
    ('args','comma','sizeofFunc'): args,
    ('call','comma','value'): args,
    ('call','comma','var'): args,
    ('call','comma','expr'): args,
    ('call','comma','call'): args,
    ('call','comma','dotAccess'): args,
    ('call','comma','args'): args,
    ('call','comma','assignment'): args,
    ('call','comma','convert'): args,
    ('call','comma','addrFunc'): args,
    ('call','comma','sizeofFunc'): args,
    ('value','comma','value'): args,
    ('value','comma','var'): args,
    ('value','comma','expr'): args,
    ('value','comma','call'): args,
    ('value','comma','dotAccess'): args,
    ('value','comma','args'): args,
    ('value','comma','assignment'): args,
    ('value','comma','convert'): args,
    ('value','comma','addrFunc'): args,
    ('value','comma','sizeofFunc'): args,
    ('var','comma','value'): args,
    ('var','comma','var'): args,
    ('var','comma','expr'): args,
    ('var','comma','call'): args,
    ('var','comma','dotAccess'): args,
    ('var','comma','args'): args,
    ('var','comma','assignment'): args,
    ('var','comma','convert'): args,
    ('var','comma','addrFunc'): args,
    ('var','comma','sizeofFunc'): args,
    ('dotAccess','comma','value'): args,
    ('dotAccess','comma','var'): args,
    ('dotAccess','comma','expr'): args,
    ('dotAccess','comma','call'): args,
    ('dotAccess','comma','dotAccess'): args,
    ('dotAccess','comma','args'): args,
    ('dotAccess','comma','assignment'): args,
    ('dotAccess','comma','convert'): args,
    ('dotAccess','comma','addrFunc'): args,
    ('dotAccess','comma','sizeofFunc'): args,
    ('convert','comma','value'): args,
    ('convert','comma','var'): args,
    ('convert','comma','expr'): args,
    ('convert','comma','call'): args,
    ('convert','comma','dotAccess'): args,
    ('convert','comma','args'): args,
    ('convert','comma','assignment'): args,
    ('convert','comma','convert'): args,
    ('convert','comma','addrFunc'): args,
    ('convert','comma','sizeofFunc'): args,
    ('expr','comma','value'): args,
    ('expr','comma','var'): args,
    ('expr','comma','expr'): args,
    ('expr','comma','call'): args,
    ('expr','comma','dotAccess'): args,
    ('expr','comma','args'): args,
    ('expr','comma','assignment'): args,
    ('expr','comma','convert'): args,
    ('expr','comma','addrFunc'): args,
    ('expr','comma','sizeofFunc'): args,
    ('addrFunc','comma','value'): args,
    ('addrFunc','comma','var'): args,
    ('addrFunc','comma','expr'): args,
    ('addrFunc','comma','call'): args,
    ('addrFunc','comma','dotAccess'): args,
    ('addrFunc','comma','args'): args,
    ('addrFunc','comma','assignment'): args,
    ('addrFunc','comma','convert'): args,
    ('addrFunc','comma','addrFunc'): args,
    ('addrFunc','comma','sizeofFunc'): args,
    ('sizeofFunc','comma','value'): args,
    ('sizeofFunc','comma','var'): args,
    ('sizeofFunc','comma','expr'): args,
    ('sizeofFunc','comma','call'): args,
    ('sizeofFunc','comma','dotAccess'): args,
    ('sizeofFunc','comma','args'): args,
    ('sizeofFunc','comma','assignment'): args,
    ('sizeofFunc','comma','convert'): args,
    ('sizeofFunc','comma','addrFunc'): args,
    ('sizeofFunc','comma','sizeofFunc'): args,
    ('assignment','comma','value'): args,
    ('assignment','comma','var'): args,
    ('assignment','comma','expr'): args,
    ('assignment','comma','call'): args,
    ('assignment','comma','dotAccess'): args,
    ('assignment','comma','args'): args,
    ('assignment','comma','convert'): args,
    ('assignment','comma','addrFunc'): args,
    ('assignment','comma','sizeofFunc'): args,
    ('assignment','comma','assignment'): args, #TODO: should be kwargs in the future

    ('ifStatement','value','beginBlock'): ifStatement,
    ('ifStatement','expr','beginBlock'): ifStatement,
    ('ifStatement','call','beginBlock'): ifStatement,
    ('ifStatement','var','beginBlock'): ifStatement,
    ('ifStatement','dotAccess','beginBlock'): ifStatement,
    ('elifStatement','value','beginBlock'): ifStatement,
    ('elifStatement','expr','beginBlock'): ifStatement,
    ('elifStatement','call','beginBlock'): ifStatement,
    ('elifStatement','var','beginBlock'): ifStatement,
    ('elifStatement','dotAccess','beginBlock'): ifStatement,

    ('defStatement','call','beginBlock'): functionDefinition,

    ('cdefStatement','call','beginBlock'): CfunctionDefinition,

    ('cdefStatement','var'): Ctype,
    ('cdefStatement','call'): Ctype,

    ('returnStatement','value'): returnStatement,
    ('returnStatement','var'): returnStatement,
    ('returnStatement','expr'): returnStatement,
    ('returnStatement','call'): returnStatement,
    ('returnStatement','convert'): returnStatement,
    ('returnStatement','dotAccess'): returnStatement,

    ('breakStatement',): singleStatement,
    ('continueStatement',): singleStatement,

    ('whileStatement','call','beginBlock'): whileLoop,
    ('whileStatement','value','beginBlock'): whileLoop,
    ('whileStatement','expr','beginBlock'): whileLoop,

    ('forStatement','var','inStatement','var','beginBlock'): forLoop,
    ('forStatement','var','inStatement','call','beginBlock'): forLoop,
    ('forStatement','var','inStatement','dotAccess','beginBlock'): forLoop,
    ('forStatement','var','inStatement','range','beginBlock'): forLoop,
    ('forStatement','args','inStatement','var','beginBlock'): forLoop,
    ('forStatement','args','inStatement','call','beginBlock'): forLoop,
    ('forStatement','args','inStatement','dotAccess','beginBlock'): forLoop,
    ('forStatement','args','inStatement','range','beginBlock'): forLoop,

    ('inStatement',): operator,

    ('forStatement','var','beginBlock'): forTarget,

    ('tryStatement','beginBlock'): tryStatement,

    ('importStatement','dotAccess'): importStatement,
    ('importStatement','var'): importStatement,
    ('importStatement','dotAccess', 'asStatement', 'var'): importStatement,
    ('importStatement','var', 'asStatement', 'var'): importStatement,

    ('classStatement','call'): classDefinition,

    ('lessThan',): operator,
    ('greaterThan',): operator,

}
