#ifndef __dict_str_!@valType@!
#define __dict_str_!@valType@!
#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct dict_str_!@valType@!_entry {
    int prehash;
    char* key;
    !@valNativeType@! val;
} dict_str_!@valType@!_entry;

typedef struct dict_str_!@valType@! {
    int len;
    int size;
    int* indices;
    dict_str_!@valType@!_entry* entries;
} dict_str_!@valType@!;

int str_prehash(char* value) {
    // P and M
    int p = 31;
    int m = 1e9 + 9;
    int power_of_p = 1;
    int hash_val = 0;
 
    // Loop to calculate the hash value
    // by iterating over the elements of string
    int length = strlen(value);
    for (int i = 0; i < length; i++) {
        hash_val = (hash_val + (value[i] - 'a' + 1) * power_of_p) % m;
        power_of_p = (power_of_p * p) % m;
    }
   
    return hash_val;
}

!@valNativeType@! dict_str_!@valType@!_get(dict_str_!@valType@!* self, char* key) {
    int size = self->size;
    int index = str_prehash(key) % size;
    if (self->indices[index] != -1) {
        while (strcmp(self->entries[self->indices[index]].key, key)) {
            index = (index + 1) % size;
            if (self->indices[index] == -1) {
                printf("KeyError: The key \"%s\" was not found.\n", key);
                exit(-1);
            }
        }
    } else {
        printf("KeyError: The key \"%s\" was not found.\n", key);
        exit(-1);
    }
    return self->entries[self->indices[index]].val;
}

void dict_str_!@valType@!_set(dict_str_!@valType@!* self, char* key, !@valNativeType@! value) {
    // Check if key already exists
    int size = self->size;
    int index = str_prehash(key) % size;
    while (self->indices[index] != -1) {
        if (!strcmp(self->entries[self->indices[index]].key, key)) {
            // found, just update its value
            self->entries[self->indices[index]].val = value;
            return;
        }
        index = (index + 1) % size;
    }
    // Insert new key and val
    int dictLen = self->len;
    self->indices[index] = dictLen;
    self->entries[dictLen].prehash = str_prehash(key); 
    self->entries[dictLen].key = key; 
    self->entries[dictLen].val = value; 
    self->len += 1;
    dictLen++;
    if (dictLen == self->size) {
        self->size *= 2;
        int size = self->size;
        // recompute entries
        self->indices = realloc(self->indices, sizeof(int)*size);
        self->entries = realloc(self->entries, sizeof(dict_str_!@valType@!_entry)*size);
        for (int i=0; i<size; i++) {
            self->indices[i] = -1; // -1 is None
        }
        for (int i=0; i<dictLen; i++) {
            int index = self->entries[i].prehash % size;
            while (self->indices[index] != -1) {
                index = (index + 1) % size;
            }
            self->indices[index] = i;
        }
    }
}

dict_str_!@valType@!* dict_str_!@valType@!_constructor(int len, int size, ...) {
    dict_int_!@valType@!* dict = malloc(sizeof(dict_str_!@valType@!));
    dict->len = 0;
    dict->size = size;
    dict->entries = malloc(sizeof(dict_str_!@valType@!_entry)*size);
    dict->indices = malloc(sizeof(int)*size);
    for (int i = 0; i < size; i++) {
        dict->indices[i] = -1;
    }

    va_list ptr;
    va_start(ptr, size); // size is the last argument before the ellipsis

    for (int i = 0; i < len; i++) {
        dict_str_!@valType@!_set(dict, va_arg(ptr, long), va_arg(ptr, !@valNativeType@!));
    }
    va_end(ptr);
    return dict;
}

void dict_str_!@valType@!_del(dict_str_!@valType@!* self, char* key) {
    int size = self->size;
    int index = str_prehash(key) % size;
    while (strcmp(self->entries[self->indices[index]].key, key)) {
        index = (index + 1) % size;
        if (self->indices[index] == -1) {
            printf("KeyError: The key \"%s\" was not found.\n", key);
            exit(-1);
        }
    }
    int dictLen = self->len - 1;
    int removedPos = self->indices[index];
    self->indices[index] = -2; // flag as deleted
    // put the last entry in this spot
    if (removedPos != dictLen) {
        self->entries[removedPos] = self->entries[dictLen];
        // update index for this entry
        index = self->entries[removedPos].prehash % size;
        while (self->indices[index] != dictLen) {
            index++;
        }
        self->indices[index] = removedPos;
    }

    if (dictLen > 10 && dictLen < size/4) {
        size /= 2;
        // Clear indices at the new size
        for (int i=0; i < size; i++) {
            self->indices[i] = -1;
        }
        // Recompute entries;
        for (int i=0; i<dictLen; i++) {
            int index = self->entries[i].prehash % size;
            while (self->indices[index] != -1) {
                index = (index + 1) % size;
            }
            self->indices[index] = i;
        }
        // Reallocate indices and entries
        self->indices = realloc(self->indices, sizeof(int)*size);
        self->entries = realloc(self->entries, sizeof(dict_str_!@valType@!_entry)*size);
        self->size = size;
    }
    self->len--;
}

void dict_str_!@valType@!_repr(dict_str_!@valType@!* self) {
    int dictLen = self->len-1;
    printf("{\n");
    for (int i=0; i<dictLen; i++) {
        printf("    \"%s\": !@formatCode@!,\n", self->entries[i].key, self->entries[i].val);
    }
    if (dictLen > -1) {
        printf("    \"%s\": !@formatCode@!\n", self->entries[dictLen].key, self->entries[dictLen].val);
    }
    printf("}\n");
}
#endif
